{
	"info": {
		"_postman_id": "0369e207-bff9-4246-87f1-2ed8b4750786",
		"name": "HW_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19580521"
	},
	"item": [
		{
			"name": "Ep.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep.2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"// 7. Спарсить request.\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.deep.eql(\"Alex\");\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"pm.expect(jsonData.age).to.deep.eql(\"32\");\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"pm.expect(jsonData.salary).to.deep.eql(2000);\r",
							"});\r",
							"\r",
							"let req = request.data\r",
							"pm.test(\"Your test name\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.name).to.deep.eql(req.name);\r",
							"    console.log(jsonData.name,req.name)\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.age).to.deep.eql(req.age);\r",
							"    console.log(jsonData.age,req.age)\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let req = request.data\r",
							"    pm.expect(jsonData.salary).to.eql(Number(req.salary));\r",
							"    console.log(jsonData.salary)\r",
							"});\r",
							"\r",
							" let jsonData = pm.response.json();\r",
							"console.log(jsonData.family)\r",
							"\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"  \r",
							"   let resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year\r",
							"   let req_salary_15 = req.salary * 4\r",
							"    pm.expect(resp_u_salary_1_5_year).to.eql(req_salary_15);\r",
							" \r",
							"  });\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep.3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    let req = request.data\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"   \r",
							"   });\r",
							"\r",
							"   pm.test(\"Your test name\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"   \r",
							"   });\r",
							"\r",
							"   pm.test(\"Your test name\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.salary).to.eql(Number(req.salary));\r",
							"   \r",
							"   });\r",
							"\r",
							"console.log(jsonData.family)\r",
							"console.log(jsonData.family.pets.dog)\r",
							"\r",
							"\r",
							"\t\tpm.test(\"Your test name\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"     let name_dog = jsonData.family.pets.dog\r",
							"    pm.expect(name_dog).to.have.property('name');\t\t\t\r",
							"  });\r",
							"\r",
							"\tpm.test(\"Your test name\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"     let age_dog = jsonData.family.pets.dog\r",
							"    pm.expect(age_dog).to.have.property('age');\t\t\t\r",
							"  });\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"  \r",
							"    pm.expect(jsonData.family.pets.dog.name).to.deep.eql('Luky');\t\t\t\r",
							"  });\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"  \r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(Number(\"4\"));\t\r",
							"   \t\r",
							"  });\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alex&age=32&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep.4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// GET ?name=Alex&age=32&salary=2000\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"// 4. Спарсить request.\r",
							"let req = request.data\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name; \r",
							"let resp_name = jsonData.name;\r",
							"pm.test(\"name_request\", function () {\r",
							"   pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let req_age = req.age; \r",
							"let resp_age = jsonData.age;\r",
							"pm.test(\"age_request\", function () {\r",
							"   pm.expect(String(req_age)).to.eql(resp_age);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let element_0 = jsonData.salary[0]\r",
							"let req_salary = req.salary\r",
							"pm.test(\"0 salary\", function () {\r",
							"   pm.expect(element_0).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let element_1 = jsonData.salary[1]\r",
							"let req_salary_1 = req.salary * 2\r",
							"pm.test(\"1 salary\", function () {\r",
							"   pm.expect(Number(element_1)).to.eql(Number(req_salary_1));\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let element_2 = jsonData.salary[2]\r",
							"let req_salary_2 = req.salary * 3\r",
							"pm.test(\"2 salary\", function () {\r",
							"   pm.expect(Number(element_2)).to.eql(Number(req_salary_2));\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"//New environments -> name\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"//New environments -> age\r",
							"// 17. Создать в окружении переменную salary\r",
							"//New environments -> salary\r",
							"// 18. Передать в окружение переменную name\r",
							"//{{name}}\r",
							"// 19. Передать в окружение переменную age\r",
							"//{{age}}\r",
							"// 20. Передать в окружение переменную salary\r",
							"//{{salary}}\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let salary = jsonData.salary[0]\r",
							"let res = 0\r",
							"for (let i = 1; i <= 3; i++) {\r",
							"res += salary\r",
							"console.log(res)}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alex&age=32&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep.5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"let json_response_0 = jsonData\r",
							"pm.test(\"json_response_0\", function () {\r",
							" pm.expect(pm.response.text(json_response_0)).to.include(\"start_qa_salary\");\r",
							"\t\t\t\t\t\t               });\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"let json_response_1 = jsonData\r",
							"pm.test(\"json_response_1\", function () {\r",
							" pm.expect(pm.response.text(json_response_1)).to.include(\"qa_salary_after_6_months\");\r",
							"\t\t\t\t\t\t               });\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"let json_response_2 = jsonData\r",
							"pm.test(\"json_response_2\", function () {\r",
							" pm.expect(pm.response.text(json_response_2)).to.include(\"qa_salary_after_12_months\");\r",
							"\t\t\t\t\t\t               });\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"let json_response_3 = jsonData\r",
							"pm.test(\"json_response_3\", function () {\r",
							" pm.expect(pm.response.text(json_response_3)).to.include(\"qa_salary_after_1.5_year\");\r",
							"\t\t\t\t\t\t               });\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"let json_response_4 = jsonData\r",
							"pm.test(\"json_response_4\", function () {\r",
							" pm.expect(pm.response.text(json_response_4)).to.include(\"qa_salary_after_3.5_years\");\r",
							"\t\t\t\t\t\t               });\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"let json_response_5 = jsonData\r",
							"pm.test(\"json_response_5\", function () {\r",
							" pm.expect(pm.response.text(json_response_5)).to.include(\"person\");\r",
							"\t\t\t\t\t\t               });\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let start_qa_salary = jsonData.start_qa_salary\r",
							"req_salary = Number(req.salary)\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"       pm.expect(start_qa_salary).to.eql(req_salary);\r",
							"      });\r",
							"\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let qa_salary_after_6_months = jsonData.qa_salary_after_6_months\r",
							"req_salary = req.salary * 2\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"       pm.expect(qa_salary_after_6_months).to.eql(Number(req_salary));\r",
							"      });\r",
							"\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let qa_salary_after_12_months = jsonData.qa_salary_after_12_months\r",
							"req_salary = req.salary * 2.7\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"       pm.expect(qa_salary_after_12_months).to.eql(Number(req_salary));\r",
							"      });\r",
							"\r",
							"// 17. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let element_1 = jsonData.person.u_name[1]\r",
							"req_salary = req.salary\r",
							"pm.test(\"1s element\", function () {\r",
							"       pm.expect(element_1).to.eql(Number(req_salary));\r",
							"      });\r",
							"// 18. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let element_2 = jsonData.person.u_age\r",
							"req_age = req.age\r",
							"pm.test(\"u_age\", function () {\r",
							"       pm.expect(element_2).to.eql(Number(req_age));\r",
							"      });\r",
							"\r",
							"// 19. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let element_3 = jsonData.person.u_salary_5_years\r",
							"req_salary = req.salary * 4.2\r",
							"pm.test(\"u_salary_5_\", function () {\r",
							"       pm.expect(element_3).to.eql(Number(req_salary));\r",
							"      });\r",
							"// 20. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let j = Object.keys(jsonData.person)\r",
							"for (let i = 0; i <= j.length - 1; i++)\r",
							"   console.log(j[i])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "{{name}}",
							"value": null,
							"disabled": true
						},
						{
							"key": "{{age}}",
							"value": null,
							"disabled": true
						},
						{
							"key": "{{salary}}",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}